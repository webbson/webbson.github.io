{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/postlist.jsx","webpack://gatsby-starter-blog/./src/components/postlist.module.scss","webpack://gatsby-starter-blog/./src/components/seo.jsx","webpack://gatsby-starter-blog/./src/pages/index.jsx"],"names":["PostList","render","posts","this","props","length","map","post","title","frontmatter","fields","slug","key","className","itemScope","itemType","Link","to","itemProp","date","tags","dangerouslySetInnerHTML","__html","description","excerpt","React","Seo","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","location","siteTitle","allMarkdownRemark","nodes"],"mappings":"8MAIqBA,E,6FACnBC,OAAA,WAAU,IACAC,EAAUC,KAAKC,MAAfF,MACR,OAAqB,IAAjBA,EAAMG,OAEN,sLASF,2BACGH,EAAMI,KAAI,SAAAC,GACT,IAAMC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,2BACEC,IAAKL,EAAKG,OAAOC,KACjBE,UCvBM,+BDwBNC,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIV,EAAKG,OAAOC,KAAMO,SAAS,MAAML,UC3BxC,+BD4BD,sBAAIA,UC3BD,gCD2BuBK,SAAS,YAChCV,IAGL,yBAAOK,UC9BH,gCD8ByBN,EAAKE,YAAYU,MAC9C,gBAAC,IAAD,CAAMC,KAAMb,EAAKE,YAAYW,QAE/B,+BACE,qBACEP,UClCK,kCDmCLQ,wBAAyB,CACvBC,OAAQf,EAAKE,YAAYc,aAAehB,EAAKiB,SAE/CN,SAAS,uB,GAvCWO,c,oEEQhCC,EAAM,SAAC,GAAwC,IAAD,MAArCH,EAAqC,EAArCA,YAAaI,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMpB,EAAY,EAAZA,MAC9BqB,GAASC,oBAAe,cAAxBD,KAgBFE,EAAkBR,GAAeM,EAAKG,aAAaT,YACnDU,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBxB,MAExC,OACE,gBAAC,IAAD,CACE0B,eAAgB,CACdP,QAEFnB,MAAOA,EACP2B,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS7B,GAEX,CACE8B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAS7B,GAEX,CACE4B,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfF,EAAIgB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNL,YAAY,IAUd,O,oFCzEA,UAZkB,SAAC,GAAwB,IAAD,EAArBoB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKd,KAAKG,oBAAV,eAAwBxB,QAAxB,QACZN,EAAQyC,EAAKG,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQH,SAAUA,EAAUpC,MAAOqC,GACjC,gBAAC,IAAD,CAAKrC,MAAM,cACX,gBAAC,IAAD,CAAUN,MAAOA","file":"component---src-pages-index-jsx-207b78d7ec29b11f8368.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as css from \"./postlist.module.scss\"\nimport Tags from \"../molecules/tags\"\nexport default class PostList extends React.Component {\n  render() {\n    const { posts } = this.props\n    if (posts.length === 0) {\n      return (\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      )\n    }\n\n    return (\n      <div>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          return (\n            <article\n              key={post.fields.slug}\n              className={css.post}\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <header>\n                <Link to={post.fields.slug} itemProp=\"url\" className={css.url}>\n                  <h2 className={css.title} itemProp=\"headline\">\n                    {title}\n                  </h2>\n                </Link>\n                <small className={css.date}>{post.frontmatter.date}</small>\n                <Tags tags={post.frontmatter.tags} />\n              </header>\n              <section>\n                <p\n                  className={css.excerpt}\n                  dangerouslySetInnerHTML={{\n                    __html: post.frontmatter.description || post.excerpt,\n                  }}\n                  itemProp=\"description\"\n                />\n              </section>\n            </article>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport const post = \"postlist-module--post--2bwbt\";\nexport const url = \"postlist-module--url--hKTZc\";\nexport const title = \"postlist-module--title--37liP\";\nexport const date = \"postlist-module--date--2fyT-\";\nexport const excerpt = \"postlist-module--excerpt--1-H3J\";","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostList from \"../components/postlist\"\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <PostList posts={posts}></PostList>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}