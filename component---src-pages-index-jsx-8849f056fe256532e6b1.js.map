{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/postlist.jsx","webpack:///./src/components/seo.jsx","webpack:///./src/components/postlist.module.scss"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","PostList","render","this","props","length","map","post","frontmatter","fields","slug","key","className","css","itemScope","itemType","to","itemProp","url","date","tags","excerpt","dangerouslySetInnerHTML","__html","description","React","Component","SEO","lang","meta","useStaticQuery","metaDescription","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","module","exports"],"mappings":"2FAAA,oEAiBeA,UAZG,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQP,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,CAAUC,MAAOA,O,sJCRFG,E,kGACnBC,OAAA,WAAU,IACAJ,EAAUK,KAAKC,MAAfN,MACR,OAAqB,IAAjBA,EAAMO,OAEN,wLASF,6BACGP,EAAMQ,KAAI,SAAAC,GACT,IAAMV,EAAQU,EAAKC,YAAYX,OAASU,EAAKE,OAAOC,KACpD,OACE,6BACEC,IAAKJ,EAAKE,OAAOC,KACjBE,UAAWC,IAAIN,KACfO,WAAS,EACTC,SAAS,6BAET,gCACE,kBAAC,OAAD,CAAMC,GAAIT,EAAKE,OAAOC,KAAMO,SAAS,MAAML,UAAWC,IAAIK,KACxD,wBAAIN,UAAWC,IAAIhB,MAAOoB,SAAS,YAChCpB,IAGL,2BAAOe,UAAWC,IAAIM,MAAOZ,EAAKC,YAAYW,MAC9C,kBAAC,IAAD,CAAMC,KAAMb,EAAKC,YAAYY,QAE/B,iCACE,uBACER,UAAWC,IAAIQ,QACfC,wBAAyB,CACvBC,OAAQhB,EAAKC,YAAYgB,aAAejB,EAAKc,SAE/CJ,SAAS,uB,GAvCWQ,IAAMC,Y,kCCJ5C,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCH,EAAqC,EAArCA,YAAaI,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMhC,EAAY,EAAZA,MAC9BF,EAASmC,yBAAe,cAAxBnC,KAgBFoC,EAAkBP,GAAe7B,EAAKC,aAAa4B,YACnDQ,EAAY,UAAGrC,EAAKC,oBAAR,aAAG,EAAmBC,MAExC,OACE,kBAAC,SAAD,CACEoC,eAAgB,CACdL,QAEF/B,MAAOA,EACPqC,cAAeF,EAAY,QAAWA,EAAiB,KACvDH,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASvC,GAEX,CACEwC,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAzC,EAAKC,oBAAL,mBAAmB0C,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASvC,GAEX,CACEsC,KAAK,sBACLC,QAASL,IAEXS,OAAOX,MAKfF,EAAIc,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNL,YAAY,IAUCG,O,qBCzFfe,EAAOC,QAAU,CAAC,KAAO,+BAA+B,IAAM,8BAA8B,MAAQ,gCAAgC,KAAO,+BAA+B,QAAU","file":"component---src-pages-index-jsx-8849f056fe256532e6b1.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostList from \"../components/postlist\"\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <PostList posts={posts}></PostList>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport css from \"./postlist.module.scss\"\nimport Tags from \"../molecules/tags\"\nexport default class PostList extends React.Component {\n  render() {\n    const { posts } = this.props\n    if (posts.length === 0) {\n      return (\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      )\n    }\n\n    return (\n      <div>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          return (\n            <article\n              key={post.fields.slug}\n              className={css.post}\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <header>\n                <Link to={post.fields.slug} itemProp=\"url\" className={css.url}>\n                  <h2 className={css.title} itemProp=\"headline\">\n                    {title}\n                  </h2>\n                </Link>\n                <small className={css.date}>{post.frontmatter.date}</small>\n                <Tags tags={post.frontmatter.tags} />\n              </header>\n              <section>\n                <p\n                  className={css.excerpt}\n                  dangerouslySetInnerHTML={{\n                    __html: post.frontmatter.description || post.excerpt,\n                  }}\n                  itemProp=\"description\"\n                />\n              </section>\n            </article>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"postlist-module--post--2yiXG\",\"url\":\"postlist-module--url--3iZEY\",\"title\":\"postlist-module--title--2h6OQ\",\"date\":\"postlist-module--date--3mNmA\",\"excerpt\":\"postlist-module--excerpt--2c4Oy\"};"],"sourceRoot":""}