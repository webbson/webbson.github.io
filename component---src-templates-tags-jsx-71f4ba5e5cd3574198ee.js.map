{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/postlist.jsx","webpack://gatsby-starter-blog/./src/components/postlist.module.scss","webpack://gatsby-starter-blog/./src/templates/tags.jsx"],"names":["PostList","render","posts","this","props","length","map","post","title","frontmatter","fields","slug","key","className","itemScope","itemType","Link","to","itemProp","date","tags","dangerouslySetInnerHTML","__html","description","excerpt","React","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","tagHeader","siteTitle","site","siteMetadata","e","node"],"mappings":"8MAIqBA,E,6FACnBC,OAAA,WAAU,IACAC,EAAUC,KAAKC,MAAfF,MACR,OAAqB,IAAjBA,EAAMG,OAEN,sLASF,2BACGH,EAAMI,KAAI,SAAAC,GACT,IAAMC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,2BACEC,IAAKL,EAAKG,OAAOC,KACjBE,UCvBM,+BDwBNC,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIV,EAAKG,OAAOC,KAAMO,SAAS,MAAML,UC3BxC,+BD4BD,sBAAIA,UC3BD,gCD2BuBK,SAAS,YAChCV,IAGL,yBAAOK,UC9BH,gCD8ByBN,EAAKE,YAAYU,MAC9C,gBAAC,IAAD,CAAMC,KAAMb,EAAKE,YAAYW,QAE/B,+BACE,qBACEP,UClCK,kCDmCLQ,wBAAyB,CACvBC,OAAQf,EAAKE,YAAYc,aAAehB,EAAKiB,SAE/CN,SAAS,uB,GAvCWO,c,oFEkDtC,UA9Ca,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAQH,EAARG,IADwC,EAElBF,EAAKG,kBAA3BC,EAFwC,EAExCA,MAAOC,EAFiC,EAEjCA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGTK,GAAY,UAAAP,EAAKQ,KAAKC,oBAAV,eAAwB5B,QAAxB,QAElB,OACE,gBAAC,IAAD,CAAQoB,SAAUA,EAAUpB,MAAO0B,GACjC,2BACE,0BAAKD,GACL,gBAAC,IAAD,CACE/B,MAAO6B,EAAMzB,KAAI,SAAA+B,GACf,OAAOA,EAAEC,UAGb,gBAAC,EAAAtB,KAAD,CAAMC,GAAG,SAAT","file":"component---src-templates-tags-jsx-71f4ba5e5cd3574198ee.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as css from \"./postlist.module.scss\"\nimport Tags from \"../molecules/tags\"\nexport default class PostList extends React.Component {\n  render() {\n    const { posts } = this.props\n    if (posts.length === 0) {\n      return (\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      )\n    }\n\n    return (\n      <div>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          return (\n            <article\n              key={post.fields.slug}\n              className={css.post}\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <header>\n                <Link to={post.fields.slug} itemProp=\"url\" className={css.url}>\n                  <h2 className={css.title} itemProp=\"headline\">\n                    {title}\n                  </h2>\n                </Link>\n                <small className={css.date}>{post.frontmatter.date}</small>\n                <Tags tags={post.frontmatter.tags} />\n              </header>\n              <section>\n                <p\n                  className={css.excerpt}\n                  dangerouslySetInnerHTML={{\n                    __html: post.frontmatter.description || post.excerpt,\n                  }}\n                  itemProp=\"description\"\n                />\n              </section>\n            </article>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport const post = \"postlist-module--post--2bwbt\";\nexport const url = \"postlist-module--url--hKTZc\";\nexport const title = \"postlist-module--title--37liP\";\nexport const date = \"postlist-module--date--2fyT-\";\nexport const excerpt = \"postlist-module--excerpt--1-H3J\";","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport PostList from \"../components/postlist\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div>\n        <h1>{tagHeader}</h1>\n        <PostList\n          posts={edges.map(e => {\n            return e.node\n          })}\n        ></PostList>\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}